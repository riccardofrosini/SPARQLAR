/* Generated By:JavaCC: Do not edit this line. SparqlParser.java */
package io.sparqlar.parser;
import java.io.*;
import java.util.*;
import io.sparqlar.sparqlardc.*;
import io.sparqlar.sparqlardc.propertypath.*;
import io.sparqlar.sparqlardc.querypatterns.*;
import io.sparqlar.sparqlardc.terms.*;
import io.sparqlar.sparqlardc.triplepatterns.*;

public class SparqlParser implements SparqlParserConstants {
    HashMap<String,SimpleURI> prefixes;
    public static SPARQL<?> parse(String arg) throws ParseException {
        SparqlParser parser = new SparqlParser(new StringReader(arg));
        return parser.input();
    }

  final public SPARQL<?> input() throws ParseException {
    List<Variable> vars=new ArrayList<Variable>();
    QueryPattern qp;
    boolean distinct=false;
    int limit=0;
    String filter=null;
    Token t=null;
    Token f=null;
    boolean ask=false;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      prefixes = prefixes();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
                                                     ask=true;
      break;
    case 5:
      jj_consume_token(5);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        jj_consume_token(6);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
          case 2:
          case 3:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
            jj_consume_token(1);
            break;
          case 2:
            jj_consume_token(2);
            break;
          case 3:
            jj_consume_token(3);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                                                                                                                            distinct=true;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      vars = variables();
      jj_consume_token(7);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(8);
    qp = queryPattern();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COND:
      f = jj_consume_token(COND);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t = jj_consume_token(N);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    if(!ask && vars.isEmpty()){
        vars.addAll(qp.getVariableSet());
    }
    if(t!=null)limit=Integer.parseInt(t.toString());
    if(f!=null)filter=f.toString();
    {if (true) return new SPARQL<QueryPattern>(vars,qp,prefixes,distinct,limit,filter);}
    throw new Error("Missing return statement in function");
  }

  final public List<Variable> variables() throws ParseException {
    List<Variable> set = new ArrayList<Variable>();
    Variable v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case 26:
      v = var();
                                           set.add(v);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        v = var();
                                                                                      set.add(v);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
          case 2:
          case 3:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_9;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
            jj_consume_token(1);
            break;
          case 2:
            jj_consume_token(2);
            break;
          case 3:
            jj_consume_token(3);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                          {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public QueryPattern queryPattern() throws ParseException {
    QueryPattern qp;
    HashSet<QueryPattern> set = new HashSet<QueryPattern>();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      qp = unionQueryPattern();
      break;
    case 16:
    case 19:
    case 20:
    case 21:
    case 26:
    case AN:
    case URI:
      qp = triplePattern();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                         set.add(qp);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      jj_consume_token(14);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        qp = unionQueryPattern();
        break;
      case 16:
      case 19:
      case 20:
      case 21:
      case 26:
      case AN:
      case URI:
        qp = triplePattern();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                         set.add(qp);
    }
        if(set.size()==1) {if (true) return qp;}
        {if (true) return new JoinQueryPattern<QueryPattern>(set);}
    throw new Error("Missing return statement in function");
  }

  final public QueryPattern unionQueryPattern() throws ParseException {
    QueryPattern qp;
    HashSet<QueryPattern> set = new HashSet<QueryPattern>();
    jj_consume_token(8);
    qp = queryPattern();
                            set.add(qp);
    jj_consume_token(10);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(15);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(8);
    qp = queryPattern();
                                                                                                                set.add(qp);
    jj_consume_token(10);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_16;
      }
      jj_consume_token(15);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(8);
      qp = queryPattern();
                                                                                                                set.add(qp);
      jj_consume_token(10);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new UnionQueryPattern<QueryPattern>(set);}
    throw new Error("Missing return statement in function");
  }

  final public TriplePattern triplePattern() throws ParseException {
    Subject s;
    Predicate p;
    Objec o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
    case AN:
    case URI:
      s = subject();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      p = predicate();
      o = object();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                              {if (true) return new TriplePattern(s,p,o);}
      break;
    case 16:
      jj_consume_token(16);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(17);
      s = subject();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      p = propertyPath();
      o = object();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(18);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                                     {if (true) return new Approx(s,(PropertyPath)p,o);}
      break;
    case 19:
      jj_consume_token(19);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_25;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(17);
      s = subject();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_26;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      p = propertyPath();
      o = object();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_27;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(18);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                                    {if (true) return new Relax(s,(PropertyPath)p,o);}
      break;
    case 20:
      jj_consume_token(20);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(17);
      s = subject();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      p = propertyPath();
      o = object();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(18);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                                   {if (true) return new Flex(s,(PropertyPath)p,o);}
      break;
    case 21:
      jj_consume_token(21);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_33;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(8);
      s = subject();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_34;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      p = propertyPath();
      o = object();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_35;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(10);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_36;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                                       {if (true) return new OptionalPattern(s,(PropertyPath)p,o);}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Subject subject() throws ParseException {
    Subject s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      s = var();
      break;
    case AN:
    case URI:
      s = uri();
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate predicate() throws ParseException {
    Predicate p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      p = var();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_37;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case 17:
    case AN:
    case URI:
      p = propertyPath();
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                     {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Objec object() throws ParseException {
    Objec o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      o = var();
      break;
    case AN:
    case URI:
      o = uri();
      break;
    case LITERAL:
      o = literal();
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                       {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyPath propertyPath() throws ParseException {
    PropertyPath pp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AN:
    case URI:
      pp = uri();
      break;
    case 17:
      jj_consume_token(17);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_38;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      pp = propertyPath();
     if(pp instanceof Alternation ){
    ((Alternation) pp).setToIsGrouping(); }
      jj_consume_token(18);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
    case 22:
    case 23:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        pp = closure(pp);
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
          case 2:
          case 3:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_40;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
            jj_consume_token(1);
            break;
          case 2:
            jj_consume_token(2);
            break;
          case 3:
            jj_consume_token(3);
            break;
          default:
            jj_la1[89] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
        case 23:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 22:
            pp = concatenation(pp);
            break;
          case 23:
            pp = alternation(pp);
            break;
          default:
            jj_la1[90] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      case 22:
        pp = concatenation(pp);
        break;
      case 23:
        pp = alternation(pp);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    {if (true) return pp;}
    throw new Error("Missing return statement in function");
  }

  final public Closure closure(PropertyPath pp) throws ParseException {
    jj_consume_token(13);
          {if (true) return new Closure(pp);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyPath concatenation(PropertyPath pp1) throws ParseException {
    PropertyPath pp2;
    jj_consume_token(22);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    pp2 = propertyPath();
            if(pp2 instanceof Alternation && !((Alternation) pp2).isGrouping()) {if (true) return Alternation.buildAlternationForParser(new Concatenation(pp1,((Alternation)pp2).getFirst()),((Alternation)pp2).getRest());}
            else {if (true) return new Concatenation(pp1,pp2);}
    throw new Error("Missing return statement in function");
  }

  final public Alternation alternation(PropertyPath pp1) throws ParseException {
    PropertyPath pp2;
    jj_consume_token(23);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_42;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    pp2 = propertyPath();
                                             {if (true) return Alternation.buildAlternationForParser(pp1,pp2);}
    throw new Error("Missing return statement in function");
  }

  final public HashMap<String,SimpleURI> prefixes() throws ParseException {
    HashMap<String,SimpleURI> set = new HashMap<String,SimpleURI>();
    Token t1;
    SimpleURI t2;
    jj_consume_token(24);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_43;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t1 = jj_consume_token(AN);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(25);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_45;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t2 = simpleuri();
                                                                                              set.put(t1.toString(),t2);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_46;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        jj_consume_token(1);
        break;
      case 2:
        jj_consume_token(2);
        break;
      case 3:
        jj_consume_token(3);
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_47;
      }
      jj_consume_token(24);
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[107] = jj_gen;
          break label_48;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t1 = jj_consume_token(AN);
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_49;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[110] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(25);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_50;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t2 = simpleuri();
                if(!set.containsKey(t1.toString()))set.put(t1.toString(),t2);
                else {if (true) throw new ParseException("Encountered \"" +t1.toString() + "\" prefix twice.");}
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[113] = jj_gen;
          break label_51;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          jj_consume_token(1);
          break;
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                                                                                                                          {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public Variable var() throws ParseException {
    Token t;
    jj_consume_token(26);
    t = jj_consume_token(AN);
                                               {if (true) return new Variable(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public URI uri() throws ParseException {
    URI ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
      ret = simpleuri();
      break;
    case AN:
      ret = prefixeduri();
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                            {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleURI simpleuri() throws ParseException {
Token t;
    t = jj_consume_token(URI);
                                                       {if (true) return new SimpleURI(t.toString().substring(1,t.toString().length()-1));}
    throw new Error("Missing return statement in function");
  }

  final public PrefixedURI prefixeduri() throws ParseException {
    Token pref;
    Token t;
    pref = jj_consume_token(AN);
    jj_consume_token(25);
    t = jj_consume_token(AN);
                     if(prefixes.containsKey(pref.toString())){if (true) return new PrefixedURI(pref.toString(),t.toString(),prefixes.get(pref.toString()).getUri());}
                     else {if (true) throw new ParseException("Prefix \"" + pref.toString() + "\" does not exist.");}
    throw new Error("Missing return statement in function");
  }

  final public Literal literal() throws ParseException {
    Token t;
    t = jj_consume_token(LITERAL);
                                          {if (true) return new Literal(t.toString());}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SparqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[116];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe,0xe,0x1000000,0xe,0xe,0xe,0xe,0x40,0x30,0xe,0xe,0x200,0xe,0xe,0x800,0xe,0xe,0xe,0xe,0x4000000,0xe,0xe,0x4002000,0xe,0xe,0x1c390100,0x4000,0xe,0xe,0x1c390100,0xe,0xe,0xe,0xe,0xe,0xe,0x8000,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0x1c390000,0x1c000000,0xe,0xe,0x1c020000,0x3c000000,0xe,0xe,0x18020000,0xe,0xe,0xe,0xe,0xc00000,0xc00000,0xc02000,0xc02000,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0x1000000,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0xe,0x18000000,};
   }

  /** Constructor with InputStream. */
  public SparqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SparqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SparqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SparqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SparqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SparqlParser(SparqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SparqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 116; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 116; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
