package io.sparqlar.ui;

import io.sparqlar.executors.Evaluator;
import io.sparqlar.executors.answers.AnswersContainer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class AnswersForm extends JDialog {
    private final Evaluator evaluator;
    private final int answersPerPage;
    private AnswersContainer ac;
    private JPanel answersListPanel;
    private JTable answersTable;
    private JLabel ansCount;
    private JLabel queryLabel;
    private JLabel costLabel;
    private JButton nextAnswersButton;
    private JButton allAnswersButton;


    public AnswersForm(MainWindow parent, boolean modal, Evaluator evaluator, boolean allAnswers, int answersPerPage) {
        super(parent, modal);
        answersTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                setQueryTextCost();
            }
        });
        nextAnswersButton.addActionListener(e -> getNextAnswers());
        allAnswersButton.addActionListener(e -> getAllAnswers());

        this.evaluator = evaluator;
        this.answersPerPage = answersPerPage;
        if (allAnswers) {
            this.ac = evaluator.getRemainingAnswers();
        } else {
            this.ac = evaluator.getNextAnswers(answersPerPage);
        }
        refreshTableAndButtons();
        setContentPane(answersListPanel);
        pack();
        setVisible(true);
    }

    private void setQueryTextCost() {
        int selectedRow = answersTable.getSelectedRow();
        if (selectedRow != -1) {
            costLabel.setText(Float.toString(ac.getIthAnswerCost(selectedRow)));
            queryLabel.setText(ac.getIthAnswerQuery(selectedRow));
        }
    }

    private void getAllAnswers() {
        ac = AnswersContainer.union(ac, evaluator.getRemainingAnswers());
        refreshTableAndButtons();
    }

    private void getNextAnswers() {
        ac = AnswersContainer.union(ac, evaluator.getNextAnswers(answersPerPage));
        refreshTableAndButtons();
    }

    private void refreshTableAndButtons() {
        if (!evaluator.hasMoreAnswers()) {
            allAnswersButton.setEnabled(false);
            nextAnswersButton.setEnabled(false);
        }
        String[] vars = ac.getVariablesAsArray();
        DefaultTableModel defaultTableModel = new DefaultTableModel(vars, ac.size());
        for (int i = 0; i < ac.size(); i++) {
            for (String v : vars) {
                if (ac.getIthAnswerVariable(i, v) != null)
                    defaultTableModel.setValueAt(ac.getIthAnswerVariable(i, v), i, defaultTableModel.findColumn(v));
            }
        }
        ansCount.setText("" + ac.size());
        answersTable.setModel(defaultTableModel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        answersListPanel = new JPanel();
        answersListPanel.setLayout(new GridBagLayout());
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        answersListPanel.add(scrollPane1, gbc);
        answersTable = new JTable();
        scrollPane1.setViewportView(answersTable);
        final JLabel label1 = new JLabel();
        label1.setText("Answers Count:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(label1, gbc);
        ansCount = new JLabel();
        ansCount.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(ansCount, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Query:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(label2, gbc);
        queryLabel = new JLabel();
        queryLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(queryLabel, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Cost:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(label3, gbc);
        costLabel = new JLabel();
        costLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        answersListPanel.add(costLabel, gbc);
        nextAnswersButton = new JButton();
        nextAnswersButton.setText("Next answers");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        answersListPanel.add(nextAnswersButton, gbc);
        allAnswersButton = new JButton();
        allAnswersButton.setText("All Answers");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        answersListPanel.add(allAnswersButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return answersListPanel;
    }
}
